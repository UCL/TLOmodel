  """
Run the HIV/TB modules with intervention coverage specified at national level
save outputs for plotting (file: output_plots_tb.py)
 """



import datetime
import pickle
from pathlib import Path

from tlo import Date, Simulation, logging
from tlo.analysis.utils import parse_log_file
from tlo.methods.fullmodel import fullmodel

# Where will outputs go
outputpath = Path("./outputs")  # folder for convenience of storing outputs

# date-stamp to label log files and any other outputs
datestamp = datetime.date.today().strftime("__%Y_%m_%d")

# The resource files
resourcefilepath = Path("./resources")

# %% Run the simulation
start_date = Date(2010, 1, 1)
end_date = Date(2011, 1, 1)
popsize = 10000
scenario = 0

# set up the log config
log_config = {
    "filename": "impact_of_TB_diag_platforms",
    "directory": outputpath,
    "custom_levels": {
        "*": logging.WARNING,
        "tlo.methods.tb": logging.INFO,
        "tlo.methods.demography": logging.INFO,
        "tlo.methods.healthsystem.summary": logging.INFO,
        "tlo.methods.labour.detail": logging.WARNING,
    },
}

# Register the appropriate modules
seed = 32  # set seed for reproducibility

sim = Simulation(start_date=start_date, seed=seed, log_config=log_config, show_progress_bar=True)
sim.register(*fullmodel(
    resourcefilepath=resourcefilepath,
    use_simplified_births=False,
    module_kwargs={
        "SymptomManager": {"spurious_symptoms": True},
        "HealthSystem": {"disable": False,
                         "service_availability": ["*"],
                         "mode_appt_constraints": 0,
                         "cons_availability": ['default', 'none'],
                         "beds_availability": "all",
                         "ignore_priority": False,
                         "use_funded_or_actual_staffing": "funded_plus",
                         "capabilities_coefficient": 1.0},
        "Tb": {"xpert": "default",
               "chest_xray": "default",
               "sputum": "default",
               "probability_community_chest_xray": 0.1},
    },
))

# set the scenario
def draw_parameters(self, draw_number, rng):
    return {
        'HealthSystem': {'cons_availability': ['default', 'all', 'none'][draw_number]},
        'Tb': {
            'xpert': ['default', 'all', 'none'][draw_number],
            'chest_xray': ['default',  'all', 'none'][draw_number],
            'sputum': ['default', 'all', 'none'][draw_number],
            'probability_community_chest_xray': [0.1][draw_number],
        }
    }

# Run the simulation and flush the logger
sim.make_initial_population(n=popsize)
sim.simulate(end_date=end_date)

# parse the results
output = parse_log_file(sim.log_filepath)

# save the results as a Python file
with open(outputpath / "output_plots_tb.py", "w") as f:
