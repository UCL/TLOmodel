
"""
Read in the output files generated by analysis_scenarios and plot outcomes for comparison
"""

import datetime
from pathlib import Path

import matplotlib.lines as mlines
import matplotlib.patches as mpatches
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from tlo import Date

from tlo.analysis.utils import (
    compare_number_of_deaths,
    extract_params,
    extract_results,
    get_scenario_info,
    get_scenario_outputs,
    load_pickled_dataframes,
    summarize,
    make_age_grp_lookup,
    make_age_grp_types,
)

# outputspath = Path("./outputs/t.mangal@imperial.ac.uk")
outputspath = Path("./outputs")

# Find results_folder associated with a given batch_file (and get most recent [-1])
results_folder = get_scenario_outputs("exclude_HTM_services.py", outputspath)[-1]

# Declare path for output graphs from this script
make_graph_file_name = lambda stub: results_folder / f"{stub}.png"  # noqa: E731

# look at one log (so can decide what to extract)
log = load_pickled_dataframes(results_folder)

# get basic information about the results
scenario_info = get_scenario_info(results_folder)

# Extract the parameters that have varied over the set of simulations
params = extract_params(results_folder)

# Create a list of strings summarizing the parameter values in the different draws
param_strings = [f"{row.module_param}={row.value}" for _, row in params.iterrows()]

TARGET_PERIOD = (Date(2010, 1, 1), Date(2020, 1, 1))


# %%:  ---------------------------------- DALYS ---------------------------------- #
# Function to round to the nearest 1000
def round_to_nearest_100(x):
    return 100 * round(x / 100)


def num_dalys_by_cause(_df):
    """Return total number of DALYS (Stacked) (total by age-group within the TARGET_PERIOD)"""
    return _df \
        .loc[_df.year.between(*[i.year for i in TARGET_PERIOD])] \
        .drop(columns=['date', 'sex', 'age_range', 'year']) \
        .sum()

# extract dalys by cause with mean and upper/lower intervals
# With 'collapse_columns', if number of draws is 1, then collapse columns multi-index:

daly_summary = summarize(
    extract_results(
        results_folder,
        module="tlo.methods.healthburden",
        key="dalys_stacked",
        custom_generate_series=num_dalys_by_cause,
        do_scaling=True,
    ),
    only_mean=False,
    collapse_columns=False,
)

daly_summary = round_to_nearest_100(daly_summary)
daly_summary = daly_summary.astype(int)
daly_summary.to_csv(outputspath / ('Apr2024_HTMresults/dalys_excl_htm' + '.csv'))


# Function to combine values based on specified format with rounding
def combine_values(row):
    combined_values = []
    for i in range(5):  # Iterate over 'draw' levels 0 to 4
        try:
            median = row[(i, 'mean')] / 1000
            lower = row[(i, 'lower')] / 1000
            upper = row[(i, 'upper')] / 1000
            combined_values.append(f"{median} ({lower}-{upper})")
        except KeyError:
            combined_values.append("")  # Handle missing columns gracefully
    return pd.Series(combined_values, index=['draw0', 'draw1', 'draw2', 'draw3', 'draw4'])


# Apply the function row-wise to create a new DataFrame
new_df = daly_summary.apply(combine_values, axis=1)

new_df.to_csv(outputspath / "Apr2024_HTMresults/daly_summary_formatted.csv")


daly_full = extract_results(
        results_folder,
        module="tlo.methods.healthburden",
        key="dalys_stacked",
        custom_generate_series=num_dalys_by_cause,
        do_scaling=True,
    )

daly_full = round_to_nearest_100(daly_full)
daly_full = daly_full.astype(int)
daly_full.to_csv(outputspath / ('Apr2024_HTMresults/dalys_excl_htm_full' + '.csv'))



daly=log['tlo.methods.healthburden']['dalys_stacked']

sum_of_remaining = daly.drop(columns=['date', 'sex', 'age_range', 'year']).sum().sum()

def total_dalys(_df):
    """Return total number of DALYS (Stacked) (total by age-group within the TARGET_PERIOD)"""
    return pd.Series(_df \
        .loc[_df.year.between(*[i.year for i in TARGET_PERIOD])] \
        .drop(columns=['date', 'sex', 'age_range', 'year']).sum().sum())


total_daly_summary = summarize(
    extract_results(
        results_folder,
        module="tlo.methods.healthburden",
        key="dalys_stacked",
        custom_generate_series=total_dalys,
        do_scaling=True,
    ),
    only_mean=False,
)

total_daly_summary = round_to_nearest_100(total_daly_summary)
total_daly_summary = total_daly_summary.astype(int)
total_daly_summary.to_csv(outputspath / ('Apr2024_HTMresults/total_dalys_excl_htm' + '.csv'))

