"""
Read in the output files generated by analysis_scenarios and plot outcomes for comparison
"""

import datetime
from pathlib import Path
import os

import matplotlib.lines as mlines
import matplotlib.patches as mpatches
import matplotlib.pyplot as plt
from matplotlib.lines import Line2D

import pandas as pd
import numpy as np
from tlo import Date

from tlo.analysis.utils import (
    compare_number_of_deaths,
    extract_params,
    extract_results,
    get_scenario_info,
    get_scenario_outputs,
    load_pickled_dataframes,
    summarize,
    make_age_grp_lookup,
    make_age_grp_types,
)
import seaborn as sns

outputspath = Path("./outputs/t.mangal@imperial.ac.uk")

# outputspath = Path("./outputs")

# Find results_folder associated with a given batch_file (and get most recent [-1])
results_folder = get_scenario_outputs("exclude_HTM_services.py", outputspath)[-1]

# Declare path for output graphs from this script
make_graph_file_name = lambda stub: results_folder / f"{stub}.png"  # noqa: E731

# look at one log (so can decide what to extract)
log = load_pickled_dataframes(results_folder)

# get basic information about the results
scenario_info = get_scenario_info(results_folder)

# Extract the parameters that have varied over the set of simulations
params = extract_params(results_folder)

# --------------------------------------------------------------------
# EXTRACT DATA


# mean dalys by cause with UI by year

results = extract_results(
    results_folder,
    module="tlo.methods.healthburden",
    key="dalys_stacked_by_age_and_time",  # <-- for DALYS stacked by age and time
    custom_generate_series=(
        lambda df_: df_.drop(
            columns=(['date', 'sex', 'age_range']),
        ).groupby(['year']).sum().stack()
    ),
    do_scaling=True
)
# indices are year/label
results.index = results.index.set_names('label', level=1)
# results.to_csv(outputspath / ('Mar2024_HTMresults/dalys_by_cause_yr_run' + '.csv'))


TARGET_PERIOD = (Date(2010, 1, 1), Date(2020, 1, 1))


# TARGET_PERIOD = (Date(2019, 1, 1), Date(2020, 1, 1))
#

# person-years (total) mean by year

def get_person_years(_df):
    """ extract person-years for each draw/run
    sums across men and women
    will skip column if particular run has failed
    """
    years = pd.to_datetime(_df["date"]).dt.year
    py = pd.Series(dtype="int64", index=years)
    for year in years:
        tot_py = (
            (_df.loc[pd.to_datetime(_df["date"]).dt.year == year]["M"]).apply(pd.Series) +
            (_df.loc[pd.to_datetime(_df["date"]).dt.year == year]["F"]).apply(pd.Series)
        ).transpose()
        py[year] = tot_py.sum().values[0]

    py.index = pd.to_datetime(years, format="%Y")

    return py


person_years = extract_results(
    results_folder,
    module="tlo.methods.demography",
    key="person_years",
    custom_generate_series=get_person_years,
    do_scaling=True
)

person_years.index = person_years.index.year
# person_years.to_csv(outputspath / ('Mar2024_HTMresults/py_by_cause_yr_run' + '.csv'))

# get dalys per person_year over the whole simulation
py_totals = person_years.sum(axis=0)


# divide each value in first column by first value in py_totals

def num_dalys_by_cause(_df):
    """Return total number of DALYS (Stacked) (total by age-group within the TARGET_PERIOD)"""
    return _df \
        .loc[_df.year.between(*[i.year for i in TARGET_PERIOD])] \
        .drop(columns=['date', 'sex', 'age_range', 'year']) \
        .sum()


daly_full = extract_results(
    results_folder,
    module="tlo.methods.healthburden",
    key="dalys_stacked",
    custom_generate_series=num_dalys_by_cause,
    do_scaling=True,
)

# divide total dalys per cause over simulation by total person-years for each run
tmp = daly_full.div(py_totals, axis=1)
# tmp.to_csv(outputspath / ('Mar2024_HTMresults/dalys_per_py_run' + '.csv'))

# get median dalys per person-year by cause
median_dalys_per_py = tmp.groupby(level=0, axis=1).median()
# median_dalys_per_py.to_csv(outputspath / ('Mar2024_HTMresults/median_dalys_per_py' + '.csv'))

min_dalys_per_py = tmp.groupby(level=0, axis=1).min()
new_columns = {col: f"{i}_min" for i, col in enumerate(min_dalys_per_py.columns)}
min_dalys_per_py = min_dalys_per_py.rename(columns=new_columns)

max_dalys_per_py = tmp.groupby(level=0, axis=1).max()
new_columns = {col: f"{i}_max" for i, col in enumerate(max_dalys_per_py.columns)}
max_dalys_per_py = max_dalys_per_py.rename(columns=new_columns)

dalys_range = pd.concat([min_dalys_per_py, max_dalys_per_py], axis=1)

# Create new column names
new_columns = [f"{i}_{ext}" for i in range(len(dalys_range.columns) // 2) for ext in ['min', 'max']]

# Reindex the DataFrame with the new column names
dalys_range = dalys_range.reindex(columns=new_columns)
# dalys_range.to_csv(outputspath / ('Mar2024_HTMresults/range_dalys_per_py' + '.csv'))

# --------------------------------- Plotting
# plot the DALY range (min-max) for all years


# df = dalys_range
# fig, ax = plt.subplots(figsize=(12, 8))
#
# # Plotting vertical lines for each row
# for i, row in enumerate(df.index):
#     ax.plot([i - 0.1, i - 0.1], [df.loc[row, '0_min'], df.loc[row, '0_max']], color='blue')
#     ax.plot([i + 0.1, i + 0.1], [df.loc[row, '1_min'], df.loc[row, '1_max']], color='red')
#
# ax.set_xticks(range(len(df.index)))
# ax.set_xticklabels(df.index, rotation=90)
# ax.set_xlabel('Draw')
# ax.set_ylabel('Values')
# ax.set_title('')
# ax.legend(['0', '1'])
#
# plt.tight_layout()
# plt.show()

# --------------------------------- DALYS by HTM or other causes
# separate out the DALYs incurred due to HTM separately, and other
# other includes all causes not in HTM
# then divide these values by person-years
# do this by run, then summarise

# Define disease categories
diseases = ['AIDS', 'TB (non-AIDS)', 'Malaria']


def g(df, diseases):
    """
  This function takes a DataFrame and a list of diseases as input.
  It creates a new DataFrame with 4 rows ('aids', 'tb', 'malaria', 'other')
  and 15 columns as in the original DataFrame.
  For each column, it retrieves the value where the row index matches a disease in the list,
  otherwise it sums the values excluding the disease rows.

  Args:
      df: The input DataFrame.
      diseases: A list of disease names.

  Returns:
      A new DataFrame with the specified format.
  """
    result = pd.DataFrame(columns=df.columns, index=['AIDS', 'TB (non-AIDS)', 'Malaria', 'other'])
    for col in df.columns:
        for disease in diseases:
            if disease in df.index:  # Check if disease is in the index string
                result.loc[disease, col] = df[col][disease]
        else:
            # Exclude disease rows when summing other values (boolean indexing)
            disease_mask = ~df.index.isin(diseases)
            result.loc['other', col] = df[col][disease_mask].sum()
    return result


dalys_broad_categories_by_run = g(daly_full.copy(), diseases.copy())
print(dalys_broad_categories_by_run)

# divide compiled DALYs by person-years
tmp2 = pd.DataFrame(dalys_broad_categories_by_run.div(py_totals, axis=1))

tmp2 = tmp2.apply(pd.to_numeric, errors='coerce')

daly_grouped_per_pyALLYEARS = pd.concat({
    'median': tmp2.groupby(level=0, axis=1).median(0.5),
    'lower': tmp2.groupby(level=0, axis=1).quantile(0.025),
    'upper': tmp2.groupby(level=0, axis=1).quantile(0.975)
}, axis=1).swaplevel(axis=1)
# daly_grouped_per_pyALLYEARS.to_csv(outputspath / ('Mar2024_HTMresults/daly_grouped_per_pyALLYEARS' + '.csv'))


# --------------------------------------------------------------------
# re-run but set target period to 2019 only

daly_grouped_per_py2019 = pd.concat({
    'median': tmp2.groupby(level=0, axis=1).median(0.5),
    'lower': tmp2.groupby(level=0, axis=1).quantile(0.025),
    'upper': tmp2.groupby(level=0, axis=1).quantile(0.975)
}, axis=1).swaplevel(axis=1)

daly_grouped_per_py2019.to_csv(outputspath / ('Mar2024_HTMresults/daly_grouped_per_py2019' + '.csv'))


# -----------------------------------------------------------------------------------------------------
# # calculate DALYs per 100,000 population by year

median_dalys = results.groupby(level=0, axis=1).median(0.5)
lower_dalys = results.groupby(level=0, axis=1).quantile(0.025)
upper_dalys = results.groupby(level=0, axis=1).quantile(0.975)


def edit_data_for_plotting(draw):
    median = median_dalys.loc[:, draw].reset_index(0)
    median = median.reset_index(0)
    median = median.rename({draw: 'dalys'}, axis=1)

    lower = lower_dalys.loc[:, draw].reset_index(0)
    lower = lower.reset_index(0)
    lower = lower.rename({draw: 'dalys_lower'}, axis=1)

    upper = upper_dalys.loc[:, draw].reset_index(0)
    upper = upper.reset_index(0)
    upper = upper.rename({draw: 'dalys_upper'}, axis=1)

    py = person_years.loc[:, draw].reset_index(0)
    py = py.rename({'date': 'year', draw: 'py'}, axis=1)

    # map person-years by year to the rows
    median['py'] = median['year'].map(py.set_index('year')['py'])
    median['dalys_per_100_000'] = (median['dalys'] / median['py']) * 100_000

    lower['py'] = lower['year'].map(py.set_index('year')['py'])
    lower['dalys_per_100_000_lower'] = (lower['dalys_lower'] / lower['py']) * 100_000

    upper['py'] = upper['year'].map(py.set_index('year')['py'])
    upper['dalys_per_100_000_upper'] = (upper['dalys_upper'] / upper['py']) * 100_000

    new_df = pd.merge(median, lower, how='left', on=['label', 'year'])
    new_df = pd.merge(new_df, upper, how='left', on=['label', 'year'])

    return new_df


dalys0 = edit_data_for_plotting(draw=0)
dalys4 = edit_data_for_plotting(draw=4)

# plots
# Set the style of seaborn
sns.set(style="whitegrid")

# Define a color palette with 6 colors
colors = sns.color_palette("husl", 6)

fig, ((ax1, ax2, ax3), (ax4, ax5, ax6)) = plt.subplots(nrows=2, ncols=3,
                                                       constrained_layout=True,
                                                       figsize=(16, 8))
fig.suptitle('')

# set diseases to include
label1 = 'Lower respiratory infections'
label2 = 'Childhood Diarrhoea'
label3 = 'Maternal Disorders'
label4 = 'Neonatal Disorders'
label5 = 'Congenital birth defects'
label6 = 'Measles'

# plot1
d0 = dalys0.loc[(dalys0.label == label1) & (dalys0.year < 2020)]

ax1.plot(d0['year'], d0['dalys_per_100_000'],
         color=colors[0])
ax1.fill_between(d0['year'], d0['dalys_per_100_000_lower'].astype(float),
                 d0['dalys_per_100_000_upper'].astype(float),
                 color=colors[0], alpha=0.2)

d4 = dalys4.loc[(dalys4.label == label1) & (dalys4.year < 2020)]

ax1.plot(d4['year'], d4['dalys_per_100_000'],
         color=colors[3])
ax1.fill_between(d4['year'], d4['dalys_per_100_000_lower'].astype(float),
                 d4['dalys_per_100_000_upper'].astype(float),
                 color=colors[3], alpha=0.2)

ax1.set_ylim(0, 9000)
ax1.set(title=label1,
        ylabel='DALYs per 100,000',
        xlabel='Year')

# plot 2
d0 = dalys0.loc[(dalys0.label == label2) & (dalys0.year < 2020)]

ax2.plot(d0['year'], d0['dalys_per_100_000'],
         color=colors[0])
ax2.fill_between(d0['year'], d0['dalys_per_100_000_lower'].astype(float),
                 d0['dalys_per_100_000_upper'].astype(float),
                 color=colors[0], alpha=0.2)

d4 = dalys4.loc[(dalys4.label == label2) & (dalys4.year < 2020)]

ax2.plot(d4['year'], d4['dalys_per_100_000'],
         color=colors[3])
ax2.fill_between(d4['year'], d4['dalys_per_100_000_lower'].astype(float),
                 d4['dalys_per_100_000_upper'].astype(float),
                 color=colors[3], alpha=0.2)

ax2.set_ylim(0, 4000)
ax2.set(title=label2,
        ylabel='DALYs per 100,000',
        xlabel='Year')

# plot 3
d0 = dalys0.loc[(dalys0.label == label3) & (dalys0.year < 2020)]

ax3.plot(d0['year'], d0['dalys_per_100_000'],
         color=colors[0])
ax3.fill_between(d0['year'], d0['dalys_per_100_000_lower'].astype(float),
                 d0['dalys_per_100_000_upper'].astype(float),
                 color=colors[0], alpha=0.2)

d4 = dalys4.loc[(dalys4.label == label3) & (dalys4.year < 2020)]

ax3.plot(d4['year'], d4['dalys_per_100_000'],
         color=colors[3])
ax3.fill_between(d4['year'], d4['dalys_per_100_000_lower'].astype(float),
                 d4['dalys_per_100_000_upper'].astype(float),
                 color=colors[3], alpha=0.2)

ax3.set_ylim(0, 2000)
ax3.set(title=label3,
        ylabel='DALYs per 100,000',
        xlabel='Year')

# plot4
d0 = dalys0.loc[(dalys0.label == label4) & (dalys0.year < 2020)]

ax4.plot(d0['year'], d0['dalys_per_100_000'],
         color=colors[0])
ax4.fill_between(d0['year'], d0['dalys_per_100_000_lower'].astype(float),
                 d0['dalys_per_100_000_upper'].astype(float),
                 color=colors[0], alpha=0.2)

d4 = dalys4.loc[(dalys4.label == label4) & (dalys4.year < 2020)]

ax4.plot(d4['year'], d4['dalys_per_100_000'],
         color=colors[3])
ax4.fill_between(d4['year'], d4['dalys_per_100_000_lower'].astype(float),
                 d4['dalys_per_100_000_upper'].astype(float),
                 color=colors[3], alpha=0.2)

ax4.set_ylim(0, 9000)
ax4.set(title=label4,
        ylabel='DALYs per 100,000',
        xlabel='Year')

# plot5
d0 = dalys0.loc[(dalys0.label == label5) & (dalys0.year < 2020)]

ax5.plot(d0['year'], d0['dalys_per_100_000'],
         color=colors[0])
ax5.fill_between(d0['year'], d0['dalys_per_100_000_lower'].astype(float),
                 d0['dalys_per_100_000_upper'].astype(float),
                 color=colors[0], alpha=0.2)

d4 = dalys4.loc[(dalys4.label == label5) & (dalys4.year < 2020)]

ax5.plot(d4['year'], d4['dalys_per_100_000'],
         color=colors[3])
ax5.fill_between(d4['year'], d4['dalys_per_100_000_lower'].astype(float),
                 d4['dalys_per_100_000_upper'].astype(float),
                 color=colors[3], alpha=0.2)

ax5.set_ylim(0, 1100)
ax5.set(title=label5,
        ylabel='DALYs per 100,000',
        xlabel='Year')

# plot6
d0 = dalys0.loc[(dalys0.label == label6) & (dalys0.year < 2020)]

ax6.plot(d0['year'], d0['dalys_per_100_000'],
         color=colors[0])
ax6.fill_between(d0['year'], d0['dalys_per_100_000_lower'].astype(float),
                 d0['dalys_per_100_000_upper'].astype(float),
                 color=colors[0], alpha=0.2)

d4 = dalys4.loc[(dalys4.label == label6) & (dalys4.year < 2020)]

ax6.plot(d4['year'], d4['dalys_per_100_000'],
         color=colors[3])
ax6.fill_between(d4['year'], d4['dalys_per_100_000_lower'].astype(float),
                 d4['dalys_per_100_000_upper'].astype(float),
                 color=colors[3], alpha=0.2)

ax6.set_ylim(0, 1100)
ax6.set(title=label6,
        ylabel='DALYs per 100,000',
        xlabel='Year')

# Add legend using custom handles
legend = ax6.legend(handles=[Line2D([0], [0], color=colors[0], lw=2),
                              Line2D([0], [0], color=colors[3], lw=2)],
                    labels=['Status quo', 'Exclude HTM'],
                    loc='upper right', bbox_to_anchor=(1, 1))

fig.savefig(outputspath / "Mar2024_HTMresults/Temporal_DALYs_per_100k.png")

plt.show()

#-----------------------------------------------------------------------------


fig, ((ax1, ax2, ax3), (ax4, ax5, ax6)) = plt.subplots(nrows=2, ncols=3,
                                                       constrained_layout=True,
                                                       figsize=(16, 8))
fig.suptitle('')

# set diseases to include
label1 = 'Cancer (Other)'
label2 = 'Heart Disease'
label3 = 'Kidney Disease'
label4 = 'Stroke'
label5 = 'Diabetes'
label6 = 'Depression / Self-harm'

# plot1
d0 = dalys0.loc[(dalys0.label == label1) & (dalys0.year < 2020)]

ax1.plot(d0['year'], d0['dalys_per_100_000'],
         color=colors[0])
ax1.fill_between(d0['year'], d0['dalys_per_100_000_lower'].astype(float),
                 d0['dalys_per_100_000_upper'].astype(float),
                 color=colors[0], alpha=0.2)

d4 = dalys4.loc[(dalys4.label == label1) & (dalys4.year < 2020)]

ax1.plot(d4['year'], d4['dalys_per_100_000'],
         color=colors[3])
ax1.fill_between(d4['year'], d4['dalys_per_100_000_lower'].astype(float),
                 d4['dalys_per_100_000_upper'].astype(float),
                 color=colors[3], alpha=0.2)

ax1.set_ylim(0, 2000)
ax1.set(title=label1,
        ylabel='DALYs per 100,000',
        xlabel='Year')

# plot 2
d0 = dalys0.loc[(dalys0.label == label2) & (dalys0.year < 2020)]

ax2.plot(d0['year'], d0['dalys_per_100_000'],
         color=colors[0])
ax2.fill_between(d0['year'], d0['dalys_per_100_000_lower'].astype(float),
                 d0['dalys_per_100_000_upper'].astype(float),
                 color=colors[0], alpha=0.2)

d4 = dalys4.loc[(dalys4.label == label2) & (dalys4.year < 2020)]

ax2.plot(d4['year'], d4['dalys_per_100_000'],
         color=colors[3])
ax2.fill_between(d4['year'], d4['dalys_per_100_000_lower'].astype(float),
                 d4['dalys_per_100_000_upper'].astype(float),
                 color=colors[3], alpha=0.2)

ax2.set_ylim(0, 1000)
ax2.set(title=label2,
        ylabel='DALYs per 100,000',
        xlabel='Year')

# plot 3
d0 = dalys0.loc[(dalys0.label == label3) & (dalys0.year < 2020)]

ax3.plot(d0['year'], d0['dalys_per_100_000'],
         color=colors[0])
ax3.fill_between(d0['year'], d0['dalys_per_100_000_lower'].astype(float),
                 d0['dalys_per_100_000_upper'].astype(float),
                 color=colors[0], alpha=0.2)

d4 = dalys4.loc[(dalys4.label == label3) & (dalys4.year < 2020)]

ax3.plot(d4['year'], d4['dalys_per_100_000'],
         color=colors[3])
ax3.fill_between(d4['year'], d4['dalys_per_100_000_lower'].astype(float),
                 d4['dalys_per_100_000_upper'].astype(float),
                 color=colors[3], alpha=0.2)

ax3.set_ylim(0, 200)
ax3.set(title=label3,
        ylabel='DALYs per 100,000',
        xlabel='Year')

# plot4
d0 = dalys0.loc[(dalys0.label == label4) & (dalys0.year < 2020)]

ax4.plot(d0['year'], d0['dalys_per_100_000'],
         color=colors[0])
ax4.fill_between(d0['year'], d0['dalys_per_100_000_lower'].astype(float),
                 d0['dalys_per_100_000_upper'].astype(float),
                 color=colors[0], alpha=0.2)

d4 = dalys4.loc[(dalys4.label == label4) & (dalys4.year < 2020)]

ax4.plot(d4['year'], d4['dalys_per_100_000'],
         color=colors[3])
ax4.fill_between(d4['year'], d4['dalys_per_100_000_lower'].astype(float),
                 d4['dalys_per_100_000_upper'].astype(float),
                 color=colors[3], alpha=0.2)

ax4.set_ylim(0, 1000)
ax4.set(title=label4,
        ylabel='DALYs per 100,000',
        xlabel='Year')

# plot5
d0 = dalys0.loc[(dalys0.label == label5) & (dalys0.year < 2020)]

ax5.plot(d0['year'], d0['dalys_per_100_000'],
         color=colors[0])
ax5.fill_between(d0['year'], d0['dalys_per_100_000_lower'].astype(float),
                 d0['dalys_per_100_000_upper'].astype(float),
                 color=colors[0], alpha=0.2)

d4 = dalys4.loc[(dalys4.label == label5) & (dalys4.year < 2020)]

ax5.plot(d4['year'], d4['dalys_per_100_000'],
         color=colors[3])
ax5.fill_between(d4['year'], d4['dalys_per_100_000_lower'].astype(float),
                 d4['dalys_per_100_000_upper'].astype(float),
                 color=colors[3], alpha=0.2)

ax5.set_ylim(0, 400)
ax5.set(title=label5,
        ylabel='DALYs per 100,000',
        xlabel='Year')

# plot6
d0 = dalys0.loc[(dalys0.label == label6) & (dalys0.year < 2020)]

ax6.plot(d0['year'], d0['dalys_per_100_000'],
         color=colors[0])
ax6.fill_between(d0['year'], d0['dalys_per_100_000_lower'].astype(float),
                 d0['dalys_per_100_000_upper'].astype(float),
                 color=colors[0], alpha=0.2)

d4 = dalys4.loc[(dalys4.label == label6) & (dalys4.year < 2020)]

ax6.plot(d4['year'], d4['dalys_per_100_000'],
         color=colors[3])
ax6.fill_between(d4['year'], d4['dalys_per_100_000_lower'].astype(float),
                 d4['dalys_per_100_000_upper'].astype(float),
                 color=colors[3], alpha=0.2)

ax6.set_ylim(0, 4000)
ax6.set(title=label6,
        ylabel='DALYs per 100,000',
        xlabel='Year')

# Add legend using custom handles
legend = ax6.legend(handles=[Line2D([0], [0], color=colors[0], lw=2),
                              Line2D([0], [0], color=colors[3], lw=2)],
                    labels=['Status quo', 'Exclude HTM'],
                    loc='lower right', bbox_to_anchor=(0.95, 0.05))

fig.savefig(outputspath / "Mar2024_HTMresults/Temporal_DALYs_per_100k_2.png")

plt.show()



####################
# add column totals
# d0.loc['Total']= d0.sum()
# d4.loc['Total']= d4.sum()


# plot population size for baseline and Excl HTM

plt.plot(d0.year, d0.py, label='Line 1', color='blue', marker='o')
plt.plot(d4.year, d4.py, label='Line 2', color='orange', marker='s')
plt.ylabel('Population size')
plt.legend(labels=['Status quo', 'Excluding HTM'])
plt.show()
