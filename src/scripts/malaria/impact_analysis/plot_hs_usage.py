"""
Read in the output files generated by analysis_scenarios and plot outcomes for comparison
"""

import datetime
from pathlib import Path
import os

import matplotlib.lines as mlines
import matplotlib.patches as mpatches
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from tlo import Date

from tlo.analysis.utils import (
    compare_number_of_deaths,
    extract_params,
    extract_results,
    get_scenario_info,
    get_scenario_outputs,
    load_pickled_dataframes,
    summarize,
    make_age_grp_lookup,
make_age_grp_types,
)

outputspath = Path("./outputs/t.mangal@imperial.ac.uk")

# Find results_folder associated with a given batch_file (and get most recent [-1])
results_folder = get_scenario_outputs("effect_of_treatment_packages_combined.py", outputspath)[-1]

# Declare path for output graphs from this script
make_graph_file_name = lambda stub: results_folder / f"{stub}.png"  # noqa: E731

# look at one log (so can decide what to extract)
log = load_pickled_dataframes(results_folder)

# get basic information about the results
scenario_info = get_scenario_info(results_folder)

# Extract the parameters that have varied over the set of simulations
params = extract_params(results_folder)

# Create a list of strings summarizing the parameter values in the different draws
param_strings = [f"{row.module_param}={row.value}" for _, row in params.iterrows()]

# -----------------------------------------------------------------------------------------
# %% HS usage
# -----------------------------------------------------------------------------------------

# comparison is draw 4 vs draw 5
# fraction of HCW time

hs_capacity = summarize(
    extract_results(
        results_folder,
        module="tlo.methods.healthsystem.summary",
        key="Capacity",
        column="average_Frac_Time_Used_Overall",
        index="date",
        do_scaling=False
    ),
    only_mean=True, collapse_columns=False
)


# ---------------------------------- PERSON-YEARS ---------------------------------- #
# for each scenario, return a df with the person-years logged in each draw/run
# to be used for calculating tb incidence or mortality rates


def get_person_years(_df):
    """ extract person-years for each draw/run
    sums across men and women
    will skip column if particular run has failed
    """
    years = pd.to_datetime(_df["date"]).dt.year
    py = pd.Series(dtype="int64", index=years)
    for year in years:
        tot_py = (
            (_df.loc[pd.to_datetime(_df["date"]).dt.year == year]["M"]).apply(pd.Series) +
            (_df.loc[pd.to_datetime(_df["date"]).dt.year == year]["F"]).apply(pd.Series)
        ).transpose()
        py[year] = tot_py.sum().values[0]

    py.index = pd.to_datetime(years, format="%Y")

    return py


py0 = summarize(
    extract_results(
        results_folder,
        module="tlo.methods.demography",
        key="person_years",
        custom_generate_series=get_person_years,
        do_scaling=False
    ),
    only_mean=True, collapse_columns=False
)


# scale HS capacity for person-years
# note py logged at start of yr, capacity logged at end of yr
py0.index = pd.to_datetime(py0.index, format='%Y-%m-%d').year
hs_capacity.index = pd.to_datetime(hs_capacity.index, format='%Y-%m-%d').year

scaled_hs_capacity = hs_capacity.divide(py0)

# ---------------------------------------------------------------------------------
# look st squeeze factors for each appt type for each scenario
years_of_simulation = 10


def summarise_appt_outputs(df_list, treatment_id):
    """ summarise the treatment counts across all draws/runs for one results folder
        requires a list of dataframes with all treatments listed with associated counts
    """
    number_runs = len(df_list)
    number_HSI_by_run = pd.DataFrame(index=np.arange(years_of_simulation), columns=np.arange(number_runs))
    column_names = [
        treatment_id + "_mean",
        treatment_id + "_lower",
        treatment_id + "_upper"]
    out = pd.DataFrame(columns=column_names)

    for i in range(number_runs):
        if treatment_id in df_list[i].columns:
            number_HSI_by_run.iloc[:, i] = pd.Series(df_list[i].loc[:, treatment_id])

    out.iloc[:, 0] = number_HSI_by_run.mean(axis=1)
    out.iloc[:, 1] = number_HSI_by_run.quantile(q=0.025, axis=1)
    out.iloc[:, 2] = number_HSI_by_run.quantile(q=0.975, axis=1)

    return out


def extract_appt_details(results_folder, module, key, column, draw):
    info = get_scenario_info(results_folder)

    df_list = list()

    for run in range(info['runs_per_draw']):

        df: pd.DataFrame = load_pickled_dataframes(results_folder, draw, run, module)[module][key]

        new = df[['date', column]].copy()
        df_list.append(pd.DataFrame(new[column].to_list()))

    # for column in each df, get median
    # list of treatment IDs
    list_tx_id = list(df_list[0].columns)
    results = pd.DataFrame(index=np.arange(years_of_simulation))

    for treatment_id in list_tx_id:
        tmp = summarise_appt_outputs(df_list, treatment_id)

        # append output to dataframe
        results = results.join(tmp)

    return results


# extract squeeze factors
module = "tlo.methods.healthsystem.summary"
key = 'HSI_Event'
column = 'squeeze_factor'
squeeze_factors_draw0 = extract_appt_details(results_folder,
                                                module=module, key=key, column=column, draw=0)
squeeze_factors_draw0_mean = squeeze_factors_draw0.loc[:, squeeze_factors_draw0.columns.str.endswith('mean')]
squeeze_factors_draw0_hiv = squeeze_factors_draw0_mean.loc[:, squeeze_factors_draw0_mean.columns.str.startswith('Hiv')]

squeeze_factors_draw1 = extract_appt_details(results_folder,
                                                module=module, key=key, column=column, draw=1)
squeeze_factors_draw1_mean = squeeze_factors_draw1.loc[:, squeeze_factors_draw1.columns.str.endswith('mean')]
squeeze_factors_draw1_hiv = squeeze_factors_draw1_mean.loc[:, squeeze_factors_draw1_mean.columns.str.startswith('Hiv')]

# no squeeze factors for draw 4 and 5!
squeeze_factors_draw4 = extract_appt_details(results_folder,
                                                module=module, key=key, column=column, draw=4)
squeeze_factors_draw5 = extract_appt_details(results_folder,
                                                module=module, key=key, column=column, draw=5)


# extract numbers of appts
column = 'TREATMENT_ID'
treatment_id0 = extract_appt_details(results_folder,
                                                module=module, key=key, column=column, draw=0)
treatment_id1 = extract_appt_details(results_folder,
                                                module=module, key=key, column=column, draw=1)
treatment_id2 = extract_appt_details(results_folder,
                                                module=module, key=key, column=column, draw=2)
treatment_id3 = extract_appt_details(results_folder,
                                                module=module, key=key, column=column, draw=3)
treatment_id4 = extract_appt_details(results_folder,
                                                module=module, key=key, column=column, draw=4)
treatment_id5 = extract_appt_details(results_folder,
                                                module=module, key=key, column=column, draw=5)

# output summary tables
writer = pd.ExcelWriter(r"outputs/t.mangal@imperial.ac.uk/hs_usage.xlsx")

hiv_tx_appts = pd.concat([treatment_id0['Hiv_Treatment_mean'],
                          treatment_id1['Hiv_Treatment_mean'],
                          treatment_id2['Hiv_Treatment_mean'],
                          treatment_id3['Hiv_Treatment_mean'],
                          treatment_id4['Hiv_Treatment_mean'],
                          treatment_id5['Hiv_Treatment_mean']], axis=1)
hiv_tx_appts.to_excel(writer, sheet_name='hiv_tx_appts')

hiv_eol_appts = pd.concat([treatment_id0['Hiv_PalliativeCare_mean'],
                           treatment_id1['Hiv_PalliativeCare_mean'],
                           treatment_id2['Hiv_PalliativeCare_mean'],
                           treatment_id3['Hiv_PalliativeCare_mean'],
                           treatment_id4['Hiv_PalliativeCare_mean'],
                           treatment_id5['Hiv_PalliativeCare_mean']], axis=1)
hiv_eol_appts.to_excel(writer, sheet_name='hiv_eol_appts')

mal_tx_appts = pd.concat([treatment_id0['Malaria_Treatment_mean'],
                          treatment_id1['Malaria_Treatment_mean'],
                          treatment_id2['Malaria_Treatment_mean'],
                          treatment_id3['Malaria_Treatment_mean'],
                          treatment_id4['Malaria_Treatment_mean'],
                          treatment_id5['Malaria_Treatment_mean']], axis=1)
mal_tx_appts.to_excel(writer, sheet_name='malaria_tx_appts')

tb_tx_appts = pd.concat([treatment_id0['Tb_Treatment_mean'],
                          treatment_id1['Tb_Treatment_mean'],
                          treatment_id2['Tb_Treatment_mean'],
                          treatment_id3['Tb_Treatment_mean'],
                          treatment_id4['Tb_Treatment_mean'],
                          treatment_id5['Tb_Treatment_mean']], axis=1)
tb_tx_appts.to_excel(writer, sheet_name='tb_tx_appts')
writer.save()
