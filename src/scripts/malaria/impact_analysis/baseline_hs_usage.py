"""
Read in the output files generated by analysis_scenarios and plot outcomes for comparison

from baseline outputs, extract numbers of treatments and sum by group, test, treatment etc.
"""

import datetime
from pathlib import Path
import os

import matplotlib.lines as mlines
import matplotlib.patches as mpatches
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from tlo import Date

from tlo.analysis.utils import (
    compare_number_of_deaths,
    extract_params,
    extract_results,
    get_scenario_info,
    get_scenario_outputs,
    load_pickled_dataframes,
    summarize,
    make_age_grp_lookup,
    make_age_grp_types,
)

outputspath = Path("./outputs/t.mangal@imperial.ac.uk")

# Find results_folder associated with a given batch_file (and get most recent [-1])
results_folder = get_scenario_outputs("exclude_services_Mar2024.py", outputspath)[-1]

# Declare path for output graphs from this script
make_graph_file_name = lambda stub: results_folder / f"{stub}.png"  # noqa: E731

# look at one log (so can decide what to extract)
log = load_pickled_dataframes(results_folder)

# get basic information about the results
scenario_info = get_scenario_info(results_folder)

# Extract the parameters that have varied over the set of simulations
params = extract_params(results_folder)

# extract scaling factor
scaling_factor = extract_results(
    results_folder,
    module="tlo.methods.population",
    key="scaling_factor",
    column="scaling_factor",
    index="date",
    do_scaling=False)


# %% -------------------------------------------------------------------------------------------------------
# EXTRACT SERVICES USED FOR HTM PROVISION USING TREATMENT_ID

# extract numbers of appts delivered for every run within a specified draw
def sum_appt_by_id(results_folder, module, key, column, draw):
    """
    sum occurrences of each treatment_id over the simulation period for every run within a draw

    produces dataframe: rows=treatment_id, columns=counts for every run

    results are scaled to true population size
    """

    info = get_scenario_info(results_folder)
    # create emtpy dataframe
    results = pd.DataFrame()

    for run in range(info['runs_per_draw']):
        df: pd.DataFrame = load_pickled_dataframes(results_folder, draw, run, module)[module][key]

        new = df[['date', column]].copy()
        tmp = pd.DataFrame(new[column].to_list())

        # sum each column to get total appts of each type over the simulation
        tmp2 = pd.DataFrame(tmp.sum())
        # add results to dataframe for output
        results = pd.concat([results, tmp2], axis=1)

    # multiply appt numbers by scaling factor
    results = results.mul(scaling_factor.values[0][0])

    return results


# extract numbers of appts
module = "tlo.methods.healthsystem.summary"
key = 'HSI_Event'
column = 'TREATMENT_ID'

# get total counts of every appt type for each scenario
appt_sums = sum_appt_by_id(results_folder,
                           module=module, key=key, column=column, draw=0)
appt_sums.to_csv(outputspath / "Mar2024_HTMresults/appt_sums_baseline.csv")


# group together appts
test = ['Tb_Test_Xray', 'Malaria_Test', 'Hiv_Test', 'Tb_Test_Screening']
tx_fup = ['Tb_Test_FollowUp', 'Hiv_Treatment', 'Tb_Treatment', 'Malaria_Treatment']
preventive = ['Hiv_Prevention_Infant', 'Hiv_Prevention_Circumcision',
              'Malaria_Prevention_Iptp', 'Tb_Prevention_Ipt', 'Hiv_Prevention_Prep']
inpatient = ['Hiv_PalliativeCare', 'Malaria_Treatment_Complicated', 'Tb_PalliativeCare']


# get summary stats for appt groups
def summarise_appt_groups(group):

    # index names for series to be output
    index_names = ['run1', 'run2', 'run3', 'run4', 'run5', 'median', 'lower', 'upper']

    # extract and sum appts within this group for each run
    tmp = appt_sums.loc[group].sum()
    tmp = tmp.append(pd.Series(tmp.median()))
    tmp = tmp.append(pd.Series(tmp.quantile(0.025)))
    tmp = tmp.append(pd.Series(tmp.quantile(0.975)))

    tmp.index = index_names

    return tmp


# extract median/lower/upper values for testing appts in baseline scenario
test_sums = summarise_appt_groups(test)
tx_fup_sums = summarise_appt_groups(tx_fup)
preventive_sums = summarise_appt_groups(preventive)
inpatient_sums = summarise_appt_groups(inpatient)



# %% -------------------------------------------------------------------------------------------------------
# EXTRACT TOTAL HEALTH SYSTEM USAGE IN BASELINE SCENARIO USING APPT_TYPE

# extract numbers of appts
module = "tlo.methods.healthsystem.summary"
key = 'HSI_Event'
column = 'Number_By_Appt_Type_Code'

# get total counts of every appt type for each scenario
appt_types = sum_appt_by_id(results_folder,
                           module=module, key=key, column=column, draw=0)

appt_types.loc['Total'] = appt_types.sum()

print(appt_types.loc['Total'].median())
print(appt_types.loc['Total'].quantile(0.025))
print(appt_types.loc['Total'].quantile(0.975))

# get median number certain appt types
print(appt_types.loc['AccidentsandEmerg'].median())

print(appt_types.loc['IPAdmission'].median())

# add in median and UI for each row
appt_types['median'] = appt_types.median(axis='columns')
appt_types['lower'] = appt_types.quantile(0.025, axis='columns')
appt_types['upper'] = appt_types.quantile(0.975, axis='columns')

# produce table for export
output_table = appt_types[['median', 'lower', 'upper']].copy()


# round all values to nearest 100
# Define a custom rounding function
def round_to_nearest_100(x):
    return round(x, -2)


output_table = output_table.applymap(round_to_nearest_100)
# Convert all values to integers
output_table = output_table.astype(int, errors='ignore')

output_table.to_csv(outputspath / ('baseline_appt_numbers' + '.csv'))










# extract squeeze factor
# todo these are in the 1000s, so don't use without further checks
module = "tlo.methods.healthsystem.summary"
key = 'HSI_Event'
column = 'squeeze_factor'

# get total counts of every appt type for each scenario
squeeze = sum_appt_by_id(results_folder,
                           module=module, key=key, column=column, draw=0)


