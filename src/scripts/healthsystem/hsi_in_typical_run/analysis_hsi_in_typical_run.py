"""This file uses the run generated by `scenario_hsi_in_typical_run.py` to generate descriptions of the HSI that occur
in a typical run."""



# %% Declare the name of the file that specified the scenarios used in this run.
from pathlib import Path
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from tlo.analysis.utils import get_scenario_outputs, load_pickled_dataframes

scenario_filename = 'scenario_hsi_in_typical_run.py'

# %% Declare usual paths:
outputspath = Path('./outputs/tbh03@ic.ac.uk')
rfp = Path('./resources')

# Find results folder (most recent run generated using that scenario_filename)
results_folder = get_scenario_outputs(scenario_filename, outputspath)[-1]
print(f"Results folder is: {results_folder}")

# Declare path for output graphs from this script
make_graph_file_name = lambda stub: results_folder / f"{stub}.png"  # noqa: E731

# %% Extract results
log = load_pickled_dataframes(results_folder)['tlo.methods.healthsystem']  # (There was only one draw and one run)

# %% Plot: Fraction of Total Healthcare Worker Time Used

cap = log['Capacity']
cap["date"] = pd.to_datetime(cap["date"])
cap = cap.set_index('date')

frac_time_used = cap['Frac_Time_Used_Overall']

# Plot:
frac_time_used.plot()
plt.title("Fraction of Total Healthcare Worker Time Used")
plt.xlabel("Date")
plt.tight_layout()
plt.savefig(make_graph_file_name ('HSI_Frac_time_used'))
plt.show()

# %% Number of HSI:

hsi = log['HSI_Event']
hsi["date"] = pd.to_datetime(hsi["date"])
hsi["month"] = hsi["date"].dt.month

# Number of HSI that are taking place by originating module, by month
year = 2012
hsi["Module"] = hsi["TREATMENT_ID"].str.split('_').apply(lambda x: x[0])
evs = hsi.loc[hsi.date.dt.year == year]\
    .groupby(by=['month', 'Module'])\
    .size().reset_index().rename(columns={0: 'count'})\
    .pivot_table(index='month', columns='Module', values='count', fill_value=0)

# Plot:
evs.plot.bar(stacked=True)
plt.title(f"HSI by Module, per Month (year {year})")
plt.ylabel('Total per month')
plt.tight_layout()
plt.savefig(make_graph_file_name('HSI_per_module_per_month'))
plt.show()

# Plot the breakdown of all HSI, over all the years
evs = hsi.groupby(by=['Module']).size()
evs.plot.pie()
plt.title(f"HSI by Module")
plt.tight_layout()
plt.savefig(make_graph_file_name('HSI_per_module'))
plt.show()

# %% Demand for appointments

num_hsi_by_treatment_id = hsi.groupby(hsi.TREATMENT_ID)['Number_By_Appt_Type_Code'].size()

# find the appt footprint for each treatment_id
appts_by_treatment_id = \
    hsi.set_index('TREATMENT_ID')['Number_By_Appt_Type_Code'].drop_duplicates().apply(pd.Series).fillna(0.0)

# Plot...
