"""This file uses the results of the results of running `scenario_impact_of_cons_availability/scenarios.py` to make some
 summary graphs."""

from pathlib import Path

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

from tlo.analysis.utils import (
    extract_params,
    extract_results,
    get_scenario_info,
    get_scenario_outputs,
    load_pickled_dataframes,
    make_age_grp_lookup,
    make_age_grp_types,
    make_calendar_period_lookup,
    make_calendar_period_type,
    summarize,
)


# %% Gathering basic information

# Find results_folder associated with a given batch_file and get most recent

results_folder = Path("outputs/tbh03@ic.ac.uk/scenario_impact_of_consumables_availability-2023-01-12T131247Z")
# <-- path was results were downloaded to

# Could use the following to find this automatically (the most recent set of results generated by a particular Scenario
# file:
# results_folder = get_scenario_outputs(
#     'scenario_impact_of_consumables_availability.py',
#     Path('./outputs/tbh03@ic.ac.uk')
# )[-1]

# look at one log (useful for checking what can be extracted)
log = load_pickled_dataframes(results_folder)

# get basic information about the results
info = get_scenario_info(results_folder)

# 1) Examine the parameters that have varied over the set of simulations
params = extract_params(results_folder)

# Create a list of strings that summarise the parameter values in the different scenarios
param_strings = [(f"{j.module_param}={j.value}") for _, j in params.iterrows()]


# 3) Define the summary statistic of interest: deaths by age-group and time period

def _extract_deaths_total(_df: pd.DataFrame) -> pd.Series:
    """Returns pd.Series with the total number of deaths"""

    return pd.Series({'Total': len(_df)})


# 4) Extract results and produce summary statistics

deaths_extracted = extract_results(
    results_folder,
    module="tlo.methods.demography",
    key="death",
    custom_generate_series=_extract_deaths_total,
    do_scaling=True
)

deaths_summarized = summarize(deaths_extracted, only_mean=True)

# Relabel the columns with information about the parameter values
deaths_summarized.columns = param_strings

# 5) Plot
fig, ax = plt.subplots()
deaths_summarized.plot.bar(ax=ax)
ax.set_ylabel('Total number of deaths')
fig.tight_layout()
fig.show()




# Include the confidence intervals for variability across the runs:

deaths_summarized_with_ci = summarize(deaths_extracted)  # <-- don't use "mean_only" this time

fig, ax = plt.subplots()

for i, _p, in enumerate(param_strings):
    central_val = deaths_summarized_with_ci[(i, 'mean')].values
    lower_val = deaths_summarized_with_ci[(i, 'lower')].values
    upper_val = deaths_summarized_with_ci[(i, 'upper')].values

    ax.bar(i, central_val, label=_p, alpha=0.5)
    ax.plot((i, i), (lower_val, upper_val), color='black', label="_")
    ax.set_ylabel('Total number of deaths')
ax.legend()
ax.set_xticks([])
fig.tight_layout()
fig.show()


# Compute the difference between the deaths in the two runs
deaths_difference_by_run = [
    deaths_extracted[0][_run]['Total'] - deaths_extracted[1][_run]['Total']
    for _run in range(info['runs_per_draw'])
]

mean_deaths_difference = np.mean(deaths_difference_by_run)



# Now look at things in more detail with an age/time breakdown:

def _extract_deaths_by_age_group(_df: pd.DataFrame) -> pd.Series:
    """Constructs a pd.Series with index age-range/time-period and value of the number of deaths from the `death`
    dataframe logged in `tlo.methods.demography`."""

    _, agegrplookup = make_age_grp_lookup()
    _, calperiodlookup = make_calendar_period_lookup()

    _df['Age_Grp'] = _df['age'].map(agegrplookup).astype(make_age_grp_types())
    _df = _df.rename(columns={'sex': 'Sex'})

    return _df.groupby(['Age_Grp'])['person_id'].count()


deaths_summarized_by_age = summarize(
    extract_results(
        results_folder,
        module="tlo.methods.demography",
        key="death",
        custom_generate_series=_extract_deaths_by_age_group,
        do_scaling=True
    ),
)

# Compute the difference for each age-group between the two runs

fig, ax = plt.subplots()
colors = ['red', 'blue']
for i, _p, _color in zip(range(len(param_strings)), param_strings, colors):
    central_val = deaths_summarized_by_age[(i, 'mean')].values
    lower_val = deaths_summarized_by_age[(i, 'lower')].values
    upper_val = deaths_summarized_by_age[(i, 'upper')].values

    ax.plot(
        deaths_summarized_by_age.index, central_val,
        color=_color,
        label=_p
    )
    ax.fill_between(
        deaths_summarized_by_age.index, lower_val, upper_val,
        alpha=0.5,
        color=_color,
        label='_'
    )
ax.set_xticklabels(labels=deaths_summarized_by_age.index, rotation=90)
ax.set_xlabel('Age-Group')
ax.set_ylabel('Total deaths')
ax.legend()
fig.tight_layout()
fig.show()
