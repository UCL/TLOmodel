; a generative tox configuration, see: https://testrun.org/tox/latest/config.html#generative-envlist
; {toxinidir} is the directory where tox.ini is located

[tox]
envlist =
    clean,
    check,
    py38,
    report,
    docs,
    profile,
    py{38,39,310,311}-pandas{12,15,20},
    requirements

[testenv]
basepython =
    py38: {env:TOXPYTHON:python3.8}
    {clean,check,report,codecov,spell}: {env:TOXPYTHON:python3}
    py39: {env:TOXPYTHON:python3.9}
    py310: {env:TOXPYTHON:python3.10}
    {py311,docs,profile,citation}: {env:TOXPYTHON:python3.11}
setenv =
    PYTHONPATH={toxinidir}/tests
    PYTHONUNBUFFERED=yes
passenv =
    *
usedevelop = false
deps =
    -r{toxinidir}/requirements/base.txt
    pytest
    pytest-cov
commands =
    {posargs:pytest --cov --cov-report=term-missing -vv tests}

[testenv:py{38,39,310,311}-pandas{12,15,20,21}]
deps =
    pandas12: pandas==1.2.2
    pandas15: pandas==1.5.3
    pandas20: pandas==2.0.0
    pandas21: pandas==2.1.0
    pytest
    pytest-cov

[testenv:spell]
setenv =
    SPELLCHECK=1
commands =
    sphinx-build -b spelling docs dist/docs
skip_install = true
deps =
    -r{toxinidir}/docs/requirements.txt
    sphinxcontrib-spelling
    pyenchant

[testenv:docs]
deps =
    -r{toxinidir}/requirements/base.txt
    -r{toxinidir}/docs/requirements.txt
    ; require setuptools_scm for getting version info
    setuptools_scm
commands =
    sphinx-apidoc -e -f -o {toxinidir}/docs/reference {toxinidir}/src/tlo
    ; Generate API documentation for TLO methods
    python docs/tlo_methods_rst.py
    ; Generate data sources page
    python docs/tlo_data_sources.py
    ; Generate contributors page
    python docs/tlo_contributors.py
    ; Generate resources files page
    python docs/tlo_resources.py
    ; Generate HSI events listing
    python src/tlo/analysis/hsi_events.py --output-file docs/_hsi_events.rst --output-format rst-list
    python src/tlo/analysis/hsi_events.py --output-file docs/hsi_events.csv --output-format csv
    ; Generate parameters listing
    python docs/tlo_parameters.py {toxinidir}{/}resources {toxinidir}{/}docs{/}parameters.rst
    sphinx-build {posargs:-E} -b html docs dist/docs
    -sphinx-build -b linkcheck docs dist/docs

[testenv:check]
deps =
    build
    docutils
    check-manifest
    ruff
    pylint
    ; require pytest so pylint can lint tests
    pytest
    pygments
    isort
    twine
    pyyaml
    cffconvert
commands =
    python -m build
    twine check dist/*.tar.gz dist/*.whl
    ; ignore that _version.py file generated by setuptools_scm is not tracked by VCS
    check-manifest --ignore **/_version.py {toxinidir}
    ruff check src tests
    isort --check-only --diff src tests
    pylint src tests
    python {toxinidir}/src/scripts/automation/update_citation.py --check
    cffconvert --validate

[testenv:codecov]
deps =
    codecov
skip_install = true
commands =
    coverage xml --ignore-errors
    codecov []

[testenv:report]
deps = coverage[toml]
skip_install = true
commands =
    coverage report
    coverage html

[testenv:profile]
deps =
    -r{toxinidir}/requirements/dev.txt
commands =
    python {toxinidir}/src/scripts/profiling/run_profiling.py {posargs}

[testenv:clean]
commands = coverage erase
skip_install = true
deps = coverage

[testenv:citation]
commands = python {toxinidir}/src/scripts/automation/update_citation.py
skip_install = true
deps = pyyaml

[testenv:requirements]
commands =
    pip-compile --output-file {toxinidir}/requirements/base.txt
    pip-compile --extra dev --output-file {toxinidir}/requirements/dev.txt
skip_install = true
deps = pip-tools
