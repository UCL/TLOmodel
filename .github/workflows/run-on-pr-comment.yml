name: Resuable workflow for triggering tests with a pull-request comment

on:
  workflow_call:
    inputs:
      runs-on:
        description: The type of machine to run job on
        required: false
        type: string
        default: ubuntu-latest
      keyword:
        description: The keyword to appear after /run in PR comment to trigger workflow
        required: true
        type: string
      description:
        description: A description of test to use in comment generated to indicate result
        required: true
        type: string
      commands:
        description: The shell command(s) to run to execute test
        required: true
        type: string
      timeout-minutes:
        description: The timeout in minutes to halt job after
        required: false
        type: number
        default: 360

jobs:
  run_test_on_keyword_and_reply_with_result:
    runs-on: ${{ inputs.runs-on }}
    timeout-minutes: ${{ inputs.timeout-minutes }}
    if: github.event.issue.pull_request && github.event.comment.body == format('/run {0}', inputs.keyword)
    steps:
    - name: Check permissions of commenting user
      id: has_permissions
      uses: actions/github-script@v4
      with:
        script: |
          const response = await github.repos.getCollaboratorPermissionLevel({
            owner: context.repo.owner,
            repo: context.repo.repo,  
            username: context.payload.comment.user.login,
          });
          const permission_level = response.data.permission;
          return (permission_level == 'admin') || (permission_level == 'write')
    - name: Exit if insufficient permissions
      if: ${{ steps.has_permissions.outputs.result == 'false' }}
      run: |
        exit 1
    - name: React to comment
      uses: actions/github-script@v4
      with:
        script: |
          github.reactions.createForIssueComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            comment_id: context.payload.comment.id,
            content: "rocket",
          });
    - name: Get pull-request SHA
      id: sha
      uses: actions/github-script@v4
      with:
        result-encoding: string
        script: |
          const { data: pr } = await github.pulls.get({
            owner: context.issue.owner,
            repo: context.issue.repo,
            pull_number: context.issue.number,
          });
          return pr.head.sha
    - name: Checkout pull-request SHA
      uses: actions/checkout@v2
      with:
        lfs: true
        ref: ${{ steps.sha.outputs.result }}
    - name: Run test command(s)
      run: ${{ inputs.commands }}
    - name: Create comment with test result and link to workflow run information
      if: always() && steps.has_permissions.outputs.result == 'true'
      uses: actions/github-script@v4
      with:
        script: |
          const { data: workflow_jobs } = await github.actions.listJobsForWorkflowRun({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId,
          });
          const job = workflow_jobs.jobs[0];  // There should only be one job
          const run_test_commands_step = job.steps.filter(
            step => step.name == "Run test command(s)"
          )[0];  // There should only be one step with this name
          const result = (
            run_test_commands_step.conclusion == 'success' 
            ? 'succeeded ✅'
            : 'failed ❌'
          );
          const started_date = new Date(run_test_commands_step.started_at);
          const completed_date = new Date(run_test_commands_step.completed_at);
          const time_minutes = ((completed_date - started_date) / 60000).toPrecision(3);
          const details = [
            `🆔 [${job.id}](${job.html_url})`,
            `⏲️ ${time_minutes} minutes`,
            `#️⃣ ${{ steps.sha.outputs.result }}`
          ].join('\n');
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,  
            body: `## ${{inputs.description }} ${result}\n${details}`,
          });
